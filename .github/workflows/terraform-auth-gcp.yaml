name: Terraform GCP Authentication

run-name: ${{ github.actor }} is checking Terraform GCP Authentication

on:
  workflow_dispatch:
    inputs:
      folder:
        description: 'Terraform Folder'
        required: true
        default: 'terraform-gcs'
        type: choice
        options:
        - terraform-gcs
        - terraform-gce
        - terraform-gke

defaults:
    run:
      shell: bash
      #working-directory: /var/

jobs:
    authenticate-gcp-terraform:
        runs-on: Ubuntu-latest
      # Add "id-token" with the intended permissions.
        permissions:
          contents: 'read'
          id-token: 'write'
          issues: write
        steps:
        - uses: 'actions/checkout@v3'
  
        - id: 'auth'
          name: 'Authenticate to Google Cloud'
          uses: 'google-github-actions/auth@v1'
          with:
            workload_identity_provider: 'projects/915596426516/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
            service_account: 'github-actions-tf@sturdy-tuner-393016.iam.gserviceaccount.com'
        
         # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
        - name: 'Set up Cloud SDK'
          uses: 'google-github-actions/setup-gcloud@v1'
          with:
            version: ">= 390.0.0"
        
        # - name: Print Working Directory
        #   run: |
        #     pwd
        #     ls -la
        
        - id: 'gcloud'
          name:  gcloud
          working-directory: terraform-gcs
          run: |
            gcloud storage cp gs://umesh-tf-bucket-gcs/gcs-bucket-tf-state/*.tfstate .

        - name: Terraform init
          working-directory: terraform-gcs
          run: terraform init
        
        - name: Terraform Plan
          working-directory: terraform-gcs
          id: tf-plan
          run: |
            export exitcode=0
            terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
            
            echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
            
            if [ $exitcode -eq 1 ]; then
              echo Terraform Plan Failed!
              exit 1
            else 
              exit 0
            fi
            
        # Save plan to artifacts  
        - name: Publish Terraform Plan
          uses: actions/upload-artifact@v3
          with:
            name: tfplan
            path: terraform-gcs/tfplan
            
        # Create string output of Terraform Plan
        - name: Create String Output
          working-directory: terraform-gcs
          id: tf-plan-string
          run: |
            TERRAFORM_PLAN=$(terraform show -no-color tfplan)
            
            delimiter="$(openssl rand -hex 8)"
            echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
            echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```terraform' >> $GITHUB_OUTPUT
            echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "</details>" >> $GITHUB_OUTPUT
            echo "${delimiter}" >> $GITHUB_OUTPUT
            
        # Publish Terraform Plan as task summary
        - name: Publish Terraform Plan to Task Summary
          working-directory: terraform-gcs
          env:
            SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
          run: |
            echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

        # If changes are detected, create a new issue
        - name: Publish Drift Report
          if: steps.tf-plan.outputs.exitcode == 2
          uses: actions/github-script@v6
          env:
            SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const body = `${process.env.SUMMARY}`;
                const title = 'Terraform Configuration Drift Detected';
                const creator = 'github-actions[bot]'
              
                // Look to see if there is an existing drift issue
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  creator: creator,
                  title: title
                })
                  
                if( issues.data.length > 0 ) {
                  // We assume there shouldn't be more than 1 open issue, since we update any issue we find
                  const issue = issues.data[0]
                  
                  if ( issue.body == body ) {
                    console.log('Drift Detected: Found matching issue with duplicate content')
                  } else {
                    console.log('Drift Detected: Found matching issue, updating body')
                    github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      body: body
                    })
                  }
                } else {
                  console.log('Drift Detected: Creating new issue')

                  github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: title,
                    body: body
                })
                }
                
        # If changes aren't detected, close any open drift issues
        - name: Publish Drift Report
          if: steps.tf-plan.outputs.exitcode == 0
          uses: actions/github-script@v6
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const title = 'Terraform Configuration Drift Detected';
                const creator = 'github-actions[bot]'
              
                // Look to see if there is an existing drift issue
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  creator: creator,
                  title: title
                })
                  
                if( issues.data.length > 0 ) {
                  const issue = issues.data[0]
                  
                  github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  })
                }
        - name: View context attributes
          uses: actions/github-script@v6
          with:
            script: console.log(context) 
                
        # Mark the workflow as failed if drift detected 
        - name: Error on Failure
          if: steps.tf-plan.outputs.exitcode == 2
          run: exit 1

        # - id: plan
        #   working-directory: terraform-gcs
        #   run: terraform plan -no-color -lock=false -detailed-exitcode -compact-warnings
        #   continue-on-error: true
        # - run: |
        #     cat << 'EOF' >> $GITHUB_STEP_SUMMARY
        #     ### ðŸ¤– Terraform plan
        #     ```terraform
        #     ${{ steps.plan.outputs.stdout }
        #     ```
        #     EOF

        # - name: Terraform Plan
        #   working-directory: terraform-gcs
        #   id: plan
        #   run: terraform plan -no-color
        #   continue-on-error: true
        
name: Terraform GCP Authentication

run-name: ${{ github.actor }} is checking Terraform GCP Authentication

on: [push]

defaults:
    run:
      shell: bash
      #working-directory: /var/

jobs:
    authenticate-gcp-terraform:
        runs-on: Ubuntu-latest
      # Add "id-token" with the intended permissions.
        permissions:
          contents: 'read'
          id-token: 'write'
  
        steps:
        - uses: 'actions/checkout@v3'
  
        - id: 'auth'
          name: 'Authenticate to Google Cloud'
          uses: 'google-github-actions/auth@v1'
          with:
            workload_identity_provider: 'projects/915596426516/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
            service_account: 'github-actions-tf@sturdy-tuner-393016.iam.gserviceaccount.com'
        
         # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
        - name: 'Set up Cloud SDK'
          uses: 'google-github-actions/setup-gcloud@v1'
          with:
            version: ">= 390.0.0"
        
        - name: Print Working Directory
          run: |
            pwd
            ls -la
        
        - id: 'gcloud'
          name:  gcloud
          working-directory: terraform-gcs
          run: |
            gcloud storage cp gs://umesh-tf-bucket-gcs/gcs-bucket-tf-state/*.tfstate .
            ls -lla

        - name: Terraform init
          working-directory: terraform-gcs
          run: terraform init

        - name: Terraform Plan
          working-directory: terraform-gcs
          id: plan
          run: terraform plan -no-color
          continue-on-error: true

        - uses: actions/github-script@v6
          if: github.event_name == 'push'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
              })

              // 2. Prepare format of the comment
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
